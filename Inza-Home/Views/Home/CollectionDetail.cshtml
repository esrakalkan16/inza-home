@model Inza_Home.Controllers.HomeController.CollectionModel
@{
    ViewData["Title"] = Model.Name;
}

<div class="collection-detail-page">
    <div class="container">
        <!-- Breadcrumb -->
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a asp-action="Index" asp-controller="Home" class="text-decoration-none">
                        <i class="bi bi-house"></i> @HelperFunctions.Translate("Anasayfa")
                    </a>
                </li>
                <li class="breadcrumb-item">
                    <a asp-action="Collections" asp-controller="Home" class="text-decoration-none">
                        @HelperFunctions.Translate("Koleksiyonlar")
                    </a>
                </li>
                <li class="breadcrumb-item active">@HelperFunctions.Translate(Model.Name)</li>
            </ol>
        </nav>

        <!-- Main Content -->
        <div class="row g-5">
            <!-- Media Section -->
            <div class="col-lg-8">
                <div class="image-gallery">
                    <!-- Main Image -->
                    <div class="main-image-container mb-4">
                        <img id="mainImage" src="@Model.Images.FirstOrDefault()" alt="@HelperFunctions.Translate(Model.Name)" class="main-image">
                        <button class="zoom-btn" data-bs-toggle="modal" data-bs-target="#imageModal">
                            <i class="bi bi-arrows-fullscreen"></i>
                        </button>
                        <div class="image-counter">
                            <span id="currentIndex">1</span> / @Model.Images.Count
                        </div>
                    </div>

                    <!-- Thumbnail Navigation -->
                    <div class="thumbnails-wrapper">
                        <button class="nav-btn prev" id="prevThumb" disabled>
                            <i class="bi bi-chevron-left"></i>
                        </button>

                        <div class="thumbnails-container">
                            <div class="thumbnails-track" id="thumbnailsTrack">
                                @for (int i = 0; i < Model.Images.Count; i++)
                                {
                                    <div class="thumbnail @(i == 0 ? "active" : "")" data-index="@i">
                                        <img src="@Model.Images[i]" alt="@HelperFunctions.Translate(Model.Name) @(i + 1)" loading="lazy">
                                    </div>
                                }
                            </div>
                        </div>

                        <button class="nav-btn next" id="nextThumb">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Info Section -->
            <div class="col-lg-4">
                <div class="info-card">
                    <div class="collection-header">
                        <h1 class="collection-title">@HelperFunctions.Translate(Model.Name)</h1>
                        <div class="title-underline"></div>
                    </div>

                    <div class="collection-content" style="padding: 10px;">
                        <p class="description">@HelperFunctions.Translate(Model.Description)</p>

                        <!-- Features -->
                        <div class="features mb-4">
                            <h5 class="section-title">@HelperFunctions.Translate("Özellikler")</h5>
                            <ul class="features-list">
                                <li><i class="bi bi-check-circle-fill"></i> @HelperFunctions.Translate("Premium kalite malzemeler")</li>
                                <li><i class="bi bi-check-circle-fill"></i> @HelperFunctions.Translate("Modern ve şık tasarım")</li>
                                <li><i class="bi bi-check-circle-fill"></i> @HelperFunctions.Translate("Uzun ömürlü kullanım")</li>
                                <li><i class="bi bi-check-circle-fill"></i> @HelperFunctions.Translate("Kolay montaj sistemi")</li>
                            </ul>
                        </div>

                        <!-- Action Buttons -->
                        <div class="action-buttons mb-4">
                            <button class="btn btn-primary btn-action w-100 mb-3" id="contactBtn">
                                <i class="bi bi-envelope me-2"></i> @HelperFunctions.Translate("İletişime Geç")
                            </button>
                            <button class="btn btn-outline-secondary btn-action w-100" id="downloadBtn">
                                <i class="bi bi-download me-2"></i> @HelperFunctions.Translate("Katalog İndir")
                            </button>
                        </div>

                        <!-- Share Section -->
                        <div class="share-section">
                            <h6 class="section-title mb-3">@HelperFunctions.Translate("Paylaş")</h6>
                            <div class="share-buttons">
                                <button class="share-btn facebook" data-platform="facebook" title="@HelperFunctions.Translate("Facebook'ta Paylaş")">
                                    <i class="bi bi-facebook"></i>
                                </button>
                                <button class="share-btn twitter" data-platform="twitter" title="@HelperFunctions.Translate("Twitter'da Paylaş")">
                                    <i class="bi bi-twitter"></i>
                                </button>
                                <button class="share-btn whatsapp" data-platform="whatsapp" title="@HelperFunctions.Translate("WhatsApp'ta Paylaş")">
                                    <i class="bi bi-whatsapp"></i>
                                </button>
                                <button class="share-btn copy" data-platform="copy" title="@HelperFunctions.Translate("Linki Kopyala")">
                                    <i class="bi bi-clipboard"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content bg-dark">
            <div class="modal-header border-0 justify-content-end">
                <span class="modal-counter text-white fw-semibold me-auto">
                    <span id="modalCurrentIndex">1</span> / @Model.Images.Count
                </span>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body d-flex align-items-center justify-content-center position-relative p-0">
                <!-- Sol Navigasyon Oku -->
                <button class="modal-nav-arrow modal-nav-left" id="modalPrev">
                    <i class="bi bi-chevron-left"></i>
                </button>

                <!-- Resim Container -->
                <div class="modal-image-container">
                    <img id="modalImage" class="modal-image" src="@Model.Images.FirstOrDefault()" alt="">
                </div>

                <!-- Sağ Navigasyon Oku -->
                <button class="modal-nav-arrow modal-nav-right" id="modalNext">
                    <i class="bi bi-chevron-right"></i>
                </button>

                <!-- Alt Thumbnail Navigasyon -->
                <div class="modal-thumbnails">
                    <div class="modal-thumbnails-container">
                        @for (int i = 0; i < Model.Images.Count; i++)
                        {
                            <div class="modal-thumbnail @(i == 0 ? "active" : "")" data-index="@i">
                                <img src="@Model.Images[i]" alt="@Model.Name @(i + 1)" loading="lazy">
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Success Toast -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body d-flex align-items-center">
            <i class="bi bi-check-circle-fill text-success me-2"></i>
            <span id="toastMessage">@HelperFunctions.Translate("İşlem başarılı!")</span>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Mevcut CollectionGallery sınıfınıza bu ek fonksiyonları ekleyin
        class CollectionGallery {
            constructor() {
                this.currentIndex = 0;
                this.images = @Html.Raw(Json.Serialize(Model.Images));
                this.thumbnailsPerView = 4;
                this.currentThumbnailStart = 0;
                this.init();
            }

            init() {
                this.bindEvents();
                this.updateThumbnailNavigation();
                this.setImage(0);

                // YENİ: Modal thumbnail'lar için event listener ekle
                this.initModalThumbnails();
            }

            bindEvents() {
                // Mevcut kodlarınız aynen kalacak...
                document.querySelectorAll('.thumbnail').forEach((thumb, index) => {
                    thumb.addEventListener('click', () => this.setImage(index));
                });

                document.getElementById('prevThumb').addEventListener('click', () => {
                    this.navigateThumbnails(-1);
                });
                document.getElementById('nextThumb').addEventListener('click', () => {
                    this.navigateThumbnails(1);
                });

                document.getElementById('imageModal').addEventListener('show.bs.modal', () => {
                    document.getElementById('modalImage').src = this.images[this.currentIndex];
                });

                document.getElementById('modalPrev').addEventListener('click', () => {
                    this.navigateImage(-1);
                });
                document.getElementById('modalNext').addEventListener('click', () => {
                    this.navigateImage(1);
                });

                document.getElementById('contactBtn').addEventListener('click', () => {
                   location.href = '/Home/Contact';
                });

                document.getElementById('downloadBtn').addEventListener('click', () => {
                    const link = document.createElement('a');
                    link.href = '/images/content.pdf';
                    link.download = 'content.pdf'
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

                    this.showToast('@HelperFunctions.Translate("Katalog indiriliyor...")');
                });

                document.querySelectorAll('.share-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const platform = btn.dataset.platform;
                        this.share(platform);
                    });
                });

                document.addEventListener('keydown', (e) => {
                    const modal = document.getElementById('imageModal');
                    if (modal.classList.contains('show')) {
                        if (e.key === 'ArrowLeft') this.navigateImage(-1);
                        if (e.key === 'ArrowRight') this.navigateImage(1);
                    }
                });
            }

            // YENİ: Modal thumbnail navigation
            initModalThumbnails() {
                document.querySelectorAll('.modal-thumbnail').forEach((thumb, index) => {
                    thumb.addEventListener('click', () => this.setImage(index));
                });
            }

            setImage(index) {
                if (index < 0 || index >= this.images.length) return;
                this.currentIndex = index;

                // Update main image
                const mainImg = document.getElementById('mainImage');
                mainImg.src = this.images[index];

                // Update modal image
                document.getElementById('modalImage').src = this.images[index];

                // Update counters
                document.getElementById('currentIndex').textContent = index + 1;
                document.getElementById('modalCurrentIndex').textContent = index + 1;

                // Update active thumbnail
                document.querySelectorAll('.thumbnail').forEach((thumb, i) => {
                    thumb.classList.toggle('active', i === index);
                });

                // YENİ: Update modal thumbnails
                document.querySelectorAll('.modal-thumbnail').forEach((thumb, i) => {
                    thumb.classList.toggle('active', i === index);
                });
            }

            // Mevcut diğer metodlarınız aynen kalacak...
            navigateImage(direction) {
                const newIndex = this.currentIndex + direction;
                if (newIndex >= 0 && newIndex < this.images.length) {
                    this.setImage(newIndex);
                }
            }

            navigateThumbnails(direction) {
                const maxStart = Math.max(0, this.images.length - this.thumbnailsPerView);
                if (direction === -1 && this.currentThumbnailStart > 0) {
                    this.currentThumbnailStart--;
                } else if (direction === 1 && this.currentThumbnailStart < maxStart) {
                    this.currentThumbnailStart++;
                }
                this.updateThumbnailPosition();
                this.updateThumbnailNavigation();
            }

            updateThumbnailPosition() {
                const track = document.getElementById('thumbnailsTrack');
                const translateX = -this.currentThumbnailStart * (85 + 16);
                track.style.transform = `translateX(${translateX}px)`;
            }

            updateThumbnailNavigation() {
                const prevBtn = document.getElementById('prevThumb');
                const nextBtn = document.getElementById('nextThumb');
                const maxStart = Math.max(0, this.images.length - this.thumbnailsPerView);
                prevBtn.disabled = this.currentThumbnailStart === 0;
                nextBtn.disabled = this.currentThumbnailStart >= maxStart;
            }

            share(platform) {
                const url = window.location.href;
                const text = `${@Json.Serialize(Model.Name)} - @HelperFunctions.Translate("INZA HOME'dan harika bir koleksiyon!")`;

                switch (platform) {
                    case 'facebook':
                        window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`, '_blank');
                        break;
                    case 'twitter':
                        window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`, '_blank');
                        break;
                    case 'whatsapp':
                        window.open(`https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`, '_blank');
                        break;
                    case 'copy':
                        navigator.clipboard.writeText(url).then(() => {
                            this.showToast('@HelperFunctions.Translate("Link panoya kopyalandı!")');
                        }).catch(() => {
                            this.showToast('@HelperFunctions.Translate("Link kopyalanamadı.")');
                        });
                        break;
                }
            }

            showToast(message) {
                const toast = document.getElementById('successToast');
                const toastMessage = document.getElementById('toastMessage');
                toastMessage.textContent = message;
                new bootstrap.Toast(toast).show();
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            new CollectionGallery();
        });
    </script>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
}