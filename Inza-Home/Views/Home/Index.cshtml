@model Inza_Home.Models.HomeIndexViewModel
@{
    ViewData["Title"] = HelperFunctions.Translate("Anasayfa");

}


<section class="hero-wrap" style="margin-top: -80px; padding-top: 80px;">
    <div id="heroCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-interval="6000">
        <div class="carousel-indicators">

            @for (int i = 0; i < Model.Collections.Where(m=>m.ShowSlider == true).ToList().Count; i++)
            {
                <button type="button" data-bs-target="#heroCarousel" data-bs-slide-to="@i"
                        class="@(i==0?"active":"")"
                        aria-current="@(i==0?"true":"false")"
                        aria-label="Slide @(i+1)"></button>
            }
        </div>

        <div class="carousel-inner">
            @for (int i = 0; i < Model.Collections.Where(m => m.ShowSlider == true).ToList().Count; i++)
            {
                var s = Model.Collections.Where(m => m.ShowSlider == true).ToList()[i];
                var Image = Model.CollectionImages.Where(m => m.CollectionId == s.Id && m.DefaultImage == true).FirstOrDefault();

                <div class="carousel-item @(i==0?"active":"")">
                    <img src="@Image.ImageUrl" class="d-block w-100 hero-img zoom-img" alt="@HelperFunctions.Translate(s.Name)">
                    <div class="hero-overlay"></div>

                    <div class="carousel-caption d-md-block text-start caption-animate">
                        <h2 class="hero-title fw-semibold text-white mb-3">@HelperFunctions.Translate(s.Name)</h2>
                        <!-- Slider açıklaması -->
                        <p class="hero-desc text-white-50 mb-4">@s.Description</p>
                        <div class="d-flex flex-column flex-md-row gap-3">
                            <span class="star-border-container">
                                <span class="border-gradient-top"></span>
                                <span class="border-gradient-bottom"></span>
                                <a asp-controller="Home" asp-action="CollectionDetail" asp-route-id="@s.Id"
                                   class="btn btn-light px-4 py-3 fw-medium">
                                    @HelperFunctions.Translate("Detay")
                                </a>
                            </span>
                            <span class="star-border-container">
                                <span class="border-gradient-top"></span>
                                <span class="border-gradient-bottom"></span>
                                <a asp-controller="Home" asp-action="Collections"
                                   class="btn btn-brown px-4 py-3 fw-medium">
                                    @HelperFunctions.Translate("Koleksiyonlar")
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
            }
        </div>

        <button class="carousel-control-prev" type="button" data-bs-target="#heroCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">@HelperFunctions.Translate("Önceki")</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#heroCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">@HelperFunctions.Translate("Sonraki")</span>
        </button>
    </div>
</section>

<section id="collections" class="collections-section">
    @{
        var isEven = true;
        foreach (var item in Model.Collections.Where(m=>m.ShowCard == true).ToList())
        {
            var defaultImage = Model.CollectionImages.FirstOrDefault(img => img.CollectionId == item.Id && img.DefaultImage);
            <div class="collection-block fade-up">
                <div class="container">
                    <div class="row align-items-center">

                        @if (isEven)
                        {
                            isEven = false;
                            <!-- Yazı solda -->
                            <div class="col-lg-6">
                                <div class="content-wrap">
                                    <h2 class="h2 fw-bold mb-3">@item.Name</h2>
                                    <!-- Kart açıklaması (Description2) -->
                                    <p class="text-muted mb-4">@item.Description</p>
                                    <a href="@Url.Action("Collections","Home")" class="btn btn-brown px-4">
                                        @HelperFunctions.Translate("Koleksiyonu İncele")
                                    </a>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="image-box shadow-lg">
                                    <img src="@defaultImage.ImageUrl" alt="@item.Name" class="img-fluid rounded-4">
                                </div>
                            </div>
                        }
                        else
                        {
                            isEven = true;
                            <!-- Yazı sağda -->
                            <div class="col-lg-6 order-lg-2">
                                <div class="content-wrap">
                                    <h2 class="h2 fw-bold mb-3">@item.Name</h2>
                                    <p class="text-muted mb-4">@item.Description</p>
                                    <a href="@Url.Action("Collections","Home")" class="btn btn-brown px-4">
                                        @HelperFunctions.Translate("Koleksiyonu İncele")
                                    </a>
                                </div>
                            </div>
                            <div class="col-lg-6 order-lg-1">
                                <div class="image-box shadow-lg">
                                    <img src="@defaultImage.ImageUrl" alt="@item.Name" class="img-fluid rounded-4">
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
</section>

<!-- SIMPLE CTA SECTION -->
<section class="py-5" style="background: #f1f1f1;">
    <div class="container py-5">
        <div class="row justify-content-center text-center">
            <div class="col-lg-8">
                <div class="fade-in-up">
                    <h2 class="display-6 fw-normal text-brown mb-4" style="font-family: 'Playfair Display', serif;">
                        @HelperFunctions.Translate("Koleksiyonlar Hakkında Daha Fazla Bilgi Sahibi Olun")
                    </h2>
                    <div class="d-flex flex-column flex-md-row gap-3 justify-content-center mt-4">
                        <a asp-controller="Home" asp-action="COllections"
                           class="btn btn-brown btn-lg  px-5 py-3 fw-medium" style="border-radius:8px">@HelperFunctions.Translate("Koleksiyonlar")</a>
                       
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<section class="intro-section position-relative">
    <canvas id="silk-bg"></canvas>

    <div class="container position-relative" style="z-index:2; text-align:center;">
        <h1 class="creative-heading">
            @HelperFunctions.Translate("Modern çizgiler"),
            <span class="highlight">@HelperFunctions.Translate("zamansız zarafet")</span>,
            <em>@HelperFunctions.Translate("gerçek huzur")</em>
        </h1>
        <p class="section-subtitle mt-4" style="color: #dfdad7;">
            @HelperFunctions.Translate("Sadece mobilya değil, yaşam alanınıza")
            <strong>@HelperFunctions.Translate("ruh")</strong>
            @HelperFunctions.Translate("katıyoruz.")
        </p>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const canvas = document.getElementById("silk-bg");
            const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);

            const scene = new THREE.Scene();
            const camera = new THREE.OrthographicCamera(
                -1, 1, 1, -1, 0, 1
            );

            const vertexShader = `
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `;

            const fragmentShader = `
                varying vec2 vUv;
                uniform float uTime;
                uniform vec3 uColor;
                uniform float uSpeed;
                uniform float uScale;
                uniform float uRotation;
                uniform float uNoiseIntensity;

                const float e = 2.71828182845904523536;

                float noise(vec2 texCoord) {
                  float G = e;
                  vec2  r = (G * sin(G * texCoord));
                  return fract(r.x * r.y * (1.0 + texCoord.x));
                }

                vec2 rotateUvs(vec2 uv, float angle) {
                  float c = cos(angle);
                  float s = sin(angle);
                  mat2  rot = mat2(c, -s, s, c);
                  return rot * uv;
                }

                void main() {
                  float rnd = noise(gl_FragCoord.xy);
                  vec2 uv = rotateUvs(vUv * uScale, uRotation);
                  vec2 tex = uv * uScale;
                  float tOffset = uSpeed * uTime;

                  tex.y += 0.03 * sin(8.0 * tex.x - tOffset);

                  float pattern = 0.6 +
                                  0.4 * sin(5.0 * (tex.x + tex.y +
                                                   cos(3.0 * tex.x + 5.0 * tex.y) +
                                                   0.02 * tOffset) +
                                           sin(20.0 * (tex.x + tex.y - 0.1 * tOffset)));

                  vec4 col = vec4(uColor, 1.0) * vec4(pattern) - rnd / 15.0 * uNoiseIntensity;
                  col.a = 1.0;
                  gl_FragColor = col;
                }
            `;
        const uniforms = {
            uTime: { value: 0 },
            uSpeed: { value: 0.05 },      
            uScale: { value: 1.2 },
            uRotation: { value: 0.2 },
            uNoiseIntensity: { value: 0.6 },
            uColor: { value: new THREE.Color(0.90, 0.80, 0.65) } 
        };


            const geometry = new THREE.PlaneGeometry(2, 2);
            const material = new THREE.ShaderMaterial({
                vertexShader,
                fragmentShader,
                uniforms
            });

            const mesh = new THREE.Mesh(geometry, material);
            scene.add(mesh);

            function animate() {
                requestAnimationFrame(animate);
                uniforms.uTime.value += 0.05;
                renderer.render(scene, camera);
            }
            animate();

            window.addEventListener("resize", () => {
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        });
    </script>
    <script>
        // Carousel animation (korundu)
        (function () {
            const carousel = document.getElementById('heroCarousel');
            if (!carousel) return;

            function resetCaptions() {
                document.querySelectorAll('.caption-animate').forEach(el => {
                    el.classList.remove('animate-in');
                });
            }

            function activateCaption(activeItem) {
                const caption = activeItem.querySelector('.caption-animate');
                if (caption) {
                    setTimeout(() => caption.classList.add('animate-in'), 100);
                }
            }

            const firstActive = carousel.querySelector('.carousel-item.active');
            if (firstActive) activateCaption(firstActive);

            carousel.addEventListener('slide.bs.carousel', resetCaptions);
            carousel.addEventListener('slid.bs.carousel', (e) => {
                activateCaption(e.relatedTarget);
            });
        })();

        // Simple fade-in animation
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, { threshold: 0.1 });

        // Initialize fade-in elements
        document.querySelectorAll('.fade-in-up').forEach(el => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(30px)';
            el.style.transition = 'all 0.8s ease';
            observer.observe(el);
        });

        // Staggered animation delays
        document.querySelectorAll('.fade-in-up').forEach((el, index) => {
            el.style.transitionDelay = `${index * 0.1}s`;
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const blocks = document.querySelectorAll(".fade-up");
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add("visible");
                    }
                });
            }, { threshold: 0.3 });
            blocks.forEach(block => observer.observe(block));
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const blocks = document.querySelectorAll(".fade-up");
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add("visible");
                    }
                });
            }, { threshold: 0.2 });
            blocks.forEach(block => observer.observe(block));
        });
    </script>

}